// <auto-generated />
using System;
using Customer.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Customer.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251009173625_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Customer.Domain.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Georgia",
                            Name = "Tbilisi"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Georgia",
                            Name = "Batumi"
                        },
                        new
                        {
                            Id = 3,
                            Country = "Georgia",
                            Name = "Kutaisi"
                        },
                        new
                        {
                            Id = 4,
                            Country = "USA",
                            Name = "New York"
                        },
                        new
                        {
                            Id = 5,
                            Country = "USA",
                            Name = "San Francisco"
                        },
                        new
                        {
                            Id = 6,
                            Country = "Germany",
                            Name = "Munich"
                        },
                        new
                        {
                            Id = 7,
                            Country = "Germany",
                            Name = "Berlin"
                        },
                        new
                        {
                            Id = 8,
                            Country = "UK",
                            Name = "London"
                        },
                        new
                        {
                            Id = 9,
                            Country = "UK",
                            Name = "Manchester"
                        },
                        new
                        {
                            Id = 10,
                            Country = "Japan",
                            Name = "Tokyo"
                        },
                        new
                        {
                            Id = 11,
                            Country = "Japan",
                            Name = "Osaka"
                        },
                        new
                        {
                            Id = 12,
                            Country = "France",
                            Name = "Paris"
                        },
                        new
                        {
                            Id = 13,
                            Country = "France",
                            Name = "Lyon"
                        },
                        new
                        {
                            Id = 14,
                            Country = "Australia",
                            Name = "Sydney"
                        },
                        new
                        {
                            Id = 15,
                            Country = "Australia",
                            Name = "Melbourne"
                        });
                });

            modelBuilder.Entity("Customer.Domain.Models.IndividualCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid?>("ImageKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PersonalId")
                        .IsUnique();

                    b.ToTable("RetailCustomers");
                });

            modelBuilder.Entity("Customer.Domain.Models.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IndividualCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndividualCustomerId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("Customer.Domain.Models.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IndividualCustomerId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedCustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndividualCustomerId");

                    b.HasIndex("RelatedCustomerId");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("Customer.Domain.Models.IndividualCustomer", b =>
                {
                    b.HasOne("Customer.Domain.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Customer.Domain.Models.PhoneNumber", b =>
                {
                    b.HasOne("Customer.Domain.Models.IndividualCustomer", null)
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("IndividualCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Customer.Domain.Models.Relation", b =>
                {
                    b.HasOne("Customer.Domain.Models.IndividualCustomer", null)
                        .WithMany("Relations")
                        .HasForeignKey("IndividualCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customer.Domain.Models.IndividualCustomer", null)
                        .WithMany()
                        .HasForeignKey("RelatedCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Customer.Domain.Models.IndividualCustomer", b =>
                {
                    b.Navigation("PhoneNumbers");

                    b.Navigation("Relations");
                });
#pragma warning restore 612, 618
        }
    }
}
